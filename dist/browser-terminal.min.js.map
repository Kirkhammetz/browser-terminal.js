{"version":3,"sources":["node_modules/browser-pack/_prelude.js","bin/classes/Command.js","bin/classes/File.js","bin/classes/Filesystem.js","bin/classes/Interpreter.js","bin/classes/Shell.js","bin/configs/builtin-commands.js","bin/configs/default-filesystem.js","bin/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Command","_ref","arguments","undefined","name","fn","_ref$type","type","_ref$shell","shell","_classCallCheck","this","bind","args","Array","isArray","File","_ref$name","_ref$content","content","uid","genUid","user","group","permission","s4","Math","floor","random","toString","substring","DEFAULT_FS","Filesystem","fs","_typeof","JSON","parse","stringify","FileSystem","initFs","cwd","buildVirtualFs","obj","key","hasOwnProperty","path","match","pathArray","split","shift","pop","concat","slice","node","fileWalker","cb","traverseFiles","traverseDirs","pathStringToArray","result","getNode","err","Interpreter","cmd","output","parsed","command","ShellCommands","filter","exec","message","format","ShellReference","customCommands","Blueprints","Object","keys","map","Shell","_ref$filesystem","filesystem","_ref$commands","commands","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","registerCommands","_extends","help","join","cd","changeDir","ls","list","responseString","listDir","file","file.h","etc","apache2","apache2.conf","home","guest","docs","mydoc.md","mydoc2.md","mydoc3.md","root",".zshrc",".oh-my-zsh","themes","global"],"mappings":"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","file":"browser-terminal.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Command Class\n * @param name [String], fn [Function]\n *\n * don't pass arrow function if you want to use this inside your command function to access various shared shell object\n */\nclass Command {\n  constructor({ name, fn, type = 'usr', shell = undefined } = {}){\n    if (typeof name !== 'string') throw Error('Command name must be a string')\n    if (typeof fn !== 'function') throw Error('Command function must be... a function')\n\n    /**\n     * use whole function instead of arrow if you want to access\n     * circular reference of Command\n     */\n    this.fn = fn.bind(this)\n    this.name = name\n    this.type = type\n\n    if (shell) {\n      this.shell = shell\n    }\n  }\n\n  /**\n   * Dispatch Command Execution\n   *\n   * @tip don't use arrow function in you command if you want the arguments\n   * neither super and arguments get binded in AF.\n   */\n  exec(args = []) {\n    if (!Array.isArray(args)) throw Error('Command exec args must be in an array')\n    if (args.length) return this.fn(args)\n    return this.fn()\n  }\n}\n\nmodule.exports = Command\n","/**\n * @class Single File Class\n * Simulate file properties\n */\nclass File {\n  constructor({ name = '', type = 'file', content = ''} = {}) {\n    this.uid = this.genUid()\n    this.name = name\n    this.type = type\n    this.content = content\n    this.user = 'root'\n    this.group = 'root'\n\n    if (this.type === 'file') {\n      this.permission = 'rwxr--r--'\n    } else {\n      this.permission = 'drwxr-xr-x'\n    }\n\n  }\n\n  genUid() {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n      s4() + '-' + s4() + s4() + s4();\n  }\n}\n\nmodule.exports = File\n","const DEFAULT_FS = require('../configs/default-filesystem')\nconst File = require('./File')\n\n/**\n * @class Virtual Filesystem\n * Represented as an object of nodes\n */\nclass Filesystem {\n  constructor(fs = DEFAULT_FS, shell = {}) {\n    this.shell = shell\n    if (typeof fs !== 'object' || Array.isArray(fs)) throw new Error('Virtual Filesystem provided not valid, initialization failed.')\n\n    // Not By Reference.\n    // HACK: Object assign refuse to work as intended.\n    fs = JSON.parse(JSON.stringify(fs))\n    this.FileSystem = this.initFs(fs)\n\n    // CWD for commands usage\n    this.cwd = ['/']\n  }\n\n  /**\n   * Init & Pass Control to recurrsive function\n   * @return new Filesystem as nodes of multiple @class File\n   */\n  initFs(fs) {\n    this.buildVirtualFs(fs)\n    return fs\n  }\n\n  /**\n   * Traverse all node and build a virtual representation of a filesystem\n   * Each node is a File instance.\n   * @param Mocked Filesystem as Object\n   *\n   */\n  buildVirtualFs(obj) {\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n          obj[key] = new File({ name: key, content: obj[key], type: 'dir' })\n          this.buildVirtualFs(obj[key].content)\n        } else {\n          obj[key] = new File({ name: key, content: obj[key] })\n        }\n      }\n    }\n  }\n\n  /**\n   * Get a stringed path and return as array\n   * throw error if path format is invalid\n   * Relative Path gets converted using Current Working Directory\n   * @param path {String}\n   * @return Array\n   */\n  pathStringToArray(path = '') {\n    if (!path.length) throw new Error('Path cannot be empty')\n\n    // Check for invalid path, eg. two+ // in a row\n    if (path.match(/\\/{2,}/g)) throw new Error(`-invalid path: ${path}`)\n\n    // Format and Composer array\n    let pathArray = path.split('/')\n    if (pathArray[0] === '') pathArray[0] = '/'\n    if (pathArray[0] === '.') pathArray.shift()\n    if(pathArray[pathArray.length - 1] === '') pathArray.pop()\n\n    // handle relative path with current working directory\n    if (pathArray[0] !== '/') {\n      pathArray = this.cwd.concat(pathArray)\n    }\n    return pathArray\n  }\n\n  /**\n   * Path from array to String\n   * For presentational purpose.\n   * TODO\n   * @param path [Array]\n   * @return {String}\n   */\n  pathArrayToString(path = []) {\n\n  }\n\n  /**\n   * Luke.. fileWalker\n   * Accepts only Absolute Path, you must convert paths before calling using pathStringToArray\n   * @param cb executed on each file found\n   * @param fs [Shell Virtual Filesystem]\n   */\n  fileWalker(path = ['/'], fs = this.FileSystem){\n    if (!Array.isArray(path)) throw new Error('Path must be an array of nodes, use Filesystem.pathStringToArray({string})')\n\n    // avoid modifying external path reference\n    path = path.slice(0)\n\n    // TODO:\n    //  Choose:\n    //    - Go full pure\n    //    - Work on the reference of the actual node\n    // fs = Object.assign(fs, {})\n\n    // Exit Condition\n    if (!path.length) return fs\n\n    // Get current node\n    let node = path.shift()\n\n    // Go deeper if it's not the root dir\n    if (node !== '/') {\n      // check if node exist\n      if (fs[node]) {\n        fs = fs[node].content\n      } else {\n        throw new Error('File doesn\\'t exist')\n      }\n    }\n    return this.fileWalker(path, fs)\n  }\n\n  /**\n   * traverseFiles\n   * accessing all file at least once\n   * calling provided callback on each\n   * @param cb executed on each file found\n   * @param fs [Shell Virtual Filesystem]\n   */\n  traverseFiles(cb = ()=>{}, fs = this.FileSystem){\n    const self = this.traverseFiles\n    for (let node in fs) {\n      if (fs.hasOwnProperty(node)) {\n        if (fs[node].type === 'dir') this.traverseFiles(cb, fs[node].content)\n        else cb(fs[node])\n      }\n    }\n  }\n\n  /**\n   * traverseDirs\n   * accessing all directory at least once\n   * calling provided callback on each\n   * @param cb executed on each file found\n   * @param fs [Shell Virtual Filesystem]\n   */\n  traverseDirs(cb = ()=>{}, fs = this.FileSystem){\n    for (let node in fs) {\n      if (fs.hasOwnProperty(node)) {\n        if (fs[node].type === 'dir') {\n          cb(fs[node])\n          this.traverseDirs(cb, fs[node].content)\n        }\n      }\n    }\n  }\n\n  /**\n   * Get Directory Node\n   * Passed as Reference or Instance,\n   * depend by a line in @method fileWalker, see comment there.\n   * @return Directory Node Object\n   */\n  getNode(path = '') {\n    if (typeof path !== 'string') throw new Error('Invalid input.')\n    let pathArray, node\n    try {\n      pathArray = this.pathStringToArray(path)\n      node = this.fileWalker(pathArray)\n    } catch (e) {\n      throw e\n    }\n    if (node.type === 'file') {\n      throw new Error('Its a file not a directory')\n    }\n    if (!node || node.content) {\n      throw new Error('Invalid Path, doent exist')\n    }\n    return { path, pathArray , node }\n  }\n\n  /**\n   * Change Current Working Directory Gracefully\n   * @return Message String.\n   */\n  changeDir(path = '') {\n    let result\n    try {\n      result = this.getNode(path)\n    } catch (err) {\n      throw err\n    }\n    this.cwd = result.pathArray\n    return `changed directory.`\n  }\n\n  /**\n   * List Current Working Directory Files\n   * @return {}\n   */\n  listDir(path = '') {\n    let result\n    try {\n      result = this.getNode(path)\n    } catch (err) {\n      throw err\n    }\n    return result.node\n  }\n\n}\n\nmodule.exports = Filesystem\n","const Command = require('./Command')\n\n/**\n *\n * Interpreter\n * Is the parent Class of the Main Shell Class\n * - This class is the one that parse and run exec of command\n * - Parsing of builtin command on runtime happen here\n * - Will parse custom user Command too\n *\n */\nclass Interpreter {\n\n  /**\n   * Parse Command\n   * @return Array of args as in C\n   */\n  parse(cmd) {\n    if (typeof cmd !== 'string') throw new Error('Command must be a string')\n    if (!cmd.length) throw new Error('Command is empty')\n    return cmd.split(' ')\n  }\n\n  /**\n   * Format Output\n   * return error if function is returned\n   * convert everything else to json.\n   * @return JSON parsed\n   */\n  format(output) {\n    if (typeof output === 'function') {\n      return '-invalid command: Command returned invalid data type.'\n    }\n    if (output === undefined || typeof output === 'undefined') {\n      return '-invalid command: Command returned no data.'\n    }\n    return output\n    // try {\n    //   return JSON.stringify(output)\n    // } catch (e) {\n    //   return '-invalid command: Command returned invalid data type: ' + e.message\n    // }\n  }\n\n  /**\n   * Exec Command\n   * @return JSON String with output\n   */\n  exec(cmd) {\n\n    //  Parse Command String: [0] = command name, [1+] = arguments\n    const parsed = this.parse(cmd)\n\n    //  X-check if command exist\n    const command = this.ShellCommands[parsed[0]]\n    if (!command) {\n      return \"-error shell: Command doesn't exist.\\n\"\n    }\n\n    //  get arguments array and execute command return error if throw\n    const args = parsed.filter((e, i) => i > 0)\n    let output\n    try {\n      output = command.exec(args)\n    } catch (e) {\n      return '-fatal command: Command execution produced an error ' + e.message\n    }\n\n    //  Format data and Return\n    return this.format(output)\n  }\n\n  /*\n   * Generate Builtin Command List\n   */\n  registerCommands(ShellReference, customCommands = undefined) {\n    let Blueprints = require('../configs/builtin-commands')\n    /**\n     * If custom commands are passed check for valid type\n     * If good to go generate those commands\n     */\n    if (customCommands) {\n      if (typeof customCommands === 'object' && !Array.isArray(customCommands)) {\n        Blueprints = customCommands\n      } else {\n        throw new Error('Custom command provided are not in a valid format.')\n      }\n    }\n\n    const ShellCommands = {}\n    Object.keys(Blueprints).map((key) => {\n      const cmd = Blueprints[key]\n      if (typeof cmd.name === 'string' && typeof cmd.fn === 'function') {\n        cmd.shell = ShellReference\n        ShellCommands[key] = new Command(cmd)\n      }\n    })\n    return ShellCommands\n  }\n}\n\nmodule.exports = Interpreter\n","const Interpreter = require('./Interpreter')\nconst Filesystem = require('./Filesystem')\n\n/**\n * Shell Class inherits from Interpreter\n *\n */\nclass Shell extends Interpreter{\n  constructor({ filesystem = undefined, commands = undefined } = {}) {\n    super()\n\n    /**\n     * Create the virtual filesystem\n     * @return reference to instance of @class Filesystem\n     */\n    this.fs = new Filesystem(filesystem, this)\n\n\n    // Init builtin commands, @method in parent\n    // pass shell reference\n    this.ShellCommands = this.registerCommands(this)\n    this.ShellCommands = {\n      ...this.ShellCommands,\n      ...this.registerCommands(this, commands),\n    }\n  }\n\n  /**\n   * Pass control to Interpreter\n   * @return output as [String]\n   */\n  run(cmd) {\n    return this.exec(cmd)\n  }\n\n}\n\nmodule.exports = Shell\n","module.exports = {\n\n  /**\n   * Help\n   * @return List of commands\n   */\n  help: {\n    name: 'help',\n    type: 'builtin',\n    fn: function() {\n      return `Commands avaibles: ${Object.keys(this.shell.ShellCommands).join(', ')}`\n    }\n  },\n\n  /**\n   * Return passed arguments, for testing purposes\n   */\n  arguments: {\n    name: 'arguments',\n    type: 'builtin',\n    fn: args => args\n  },\n\n  /**\n   * Change Directory\n   * @type Success/Fail Message String\n   */\n  cd: {\n    name: 'cd',\n    type: 'builtin',\n    fn: function(path) {\n      if (!path) throw new Error('-invalid No path provided.')\n      path = path.join()\n      try{\n        return this.shell.fs.changeDir(path)\n      } catch(e) {\n        throw e\n      }\n    }\n  },\n\n  /**\n   * ls Command\n   * List directory files\n   * @param array of args\n   * @type formatted String\n   */\n  ls: {\n    name: 'ls',\n    type: 'builtin',\n    fn: function(path = ['./'] ) {\n      path = path.join()\n      let list, responseString = ''\n      try{\n        list = this.shell.fs.listDir(path)\n      } catch(e) {\n        throw e\n      }\n      for (let file in list) {\n        if (list.hasOwnProperty(file)) {\n          responseString += `${list[file].permission}\\t${list[file].user} ${list[file].group}\\t${list[file].name}\\n`\n        }\n      }\n      return responseString\n    }\n\n  },\n\n}\n","module.exports = {\n\n  'file.h': '#include <nope.h>',\n\n  etc: {\n    apache2: {\n      'apache2.conf': 'Not What you were looking for :)',\n    },\n  },\n\n  home: {\n    guest: {\n      docs: {\n        'mydoc.md': 'TestFile',\n        'mydoc2.md': 'TestFile2',\n        'mydoc3.md': 'TestFile3',\n      },\n    },\n  },\n\n  root:{\n    '.zshrc': 'not even close :)',\n    '.oh-my-zsh': {\n      themes: {},\n    },\n  },\n}\n","/**\n * Shell Only\n * @type {Class}\n * Init the shell with command and filesystem\n * @method execute() exposed to query the Shell with commands\n */\nglobal['Shell'] = require('./classes/Shell')\n"]}