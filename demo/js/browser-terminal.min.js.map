{"version":3,"sources":["node_modules/browser-pack/_prelude.js","bin/browser-terminal.js","bin/classes/Command.js","bin/classes/File.js","bin/classes/Filesystem.js","bin/classes/Interpreter.js","bin/classes/Shell.js","bin/classes/Terminal.js","bin/configs/builtin-commands.js","bin/configs/default-filesystem.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","global","Command","_ref","arguments","undefined","name","fn","_ref$type","type","_ref$shell","shell","_classCallCheck","this","bind","args","Array","isArray","File","_ref$name","_ref$content","content","uid","genUid","user","group","permission","s4","Math","floor","random","toString","substring","DEFAULT_FS","Filesystem","fs","_typeof","JSON","parse","stringify","FileSystem","initFs","cwd","buildVirtualFs","obj","key","hasOwnProperty","path","match","pathArray","split","shift","pop","concat","output","join","replace","slice","node","fileWalker","cb","traverseFiles","traverseDirs","fileType","pathStringToArray","result","getNode","err","cwdAsString","pathArrayToString","Interpreter","cmd","parsed","message","command","ShellCommands","filter","exec","format","ShellReference","customCommands","Blueprints","Object","keys","map","Shell","_ref$filesystem","filesystem","_ref$commands","commands","_ref$user","_ref$hostname","hostname","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","registerCommands","_extends","defineProperty","prototype","writable","enumerable","Terminal","_ret","selector","options","container","document","querySelector","init","_this2","generateRow","addEventListener","stopPropagation","input","focus","_this3","current","classList","remove","prevInput","removeEventListener","submitHandler","div","createElement","add","innerHTML","getCurrentDirectory","appendChild","out","pre","event","which","keyCode","preventDefault","target","value","trim","run","generateOutput","_defineProperty","help","whoami","cd","changeDir","ls","list","responseString","listDir","file","file.h","etc","apache2","apache2.conf","home","guest","docs","mydoc.md","mydoc2.md","mydoc3.md","root",".zshrc",".oh-my-zsh","themes"],"mappings":"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","file":"browser-terminal.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Shell Only\n * @type {Class}\n * Init the shell with command and filesystem\n * @method execute() exposed to query the Shell with commands\n */\nglobal['Terminal'] = require('./classes/Terminal')\n","/**\n * Command Class\n * @param name [String], fn [Function]\n *\n * don't pass arrow function if you want to use this inside your command function to access various shared shell object\n */\nclass Command {\n  constructor({ name, fn, type = 'usr', shell = undefined } = {}){\n    if (typeof name !== 'string') throw Error('Command name must be a string')\n    if (typeof fn !== 'function') throw Error('Command function must be... a function')\n\n    /**\n     * use whole function instead of arrow if you want to access\n     * circular reference of Command\n     */\n    this.fn = fn.bind(this)\n    this.name = name\n    this.type = type\n\n    if (shell) {\n      this.shell = shell\n    }\n  }\n\n  /**\n   * Dispatch Command Execution\n   *\n   * @tip don't use arrow function in you command if you want the arguments\n   * neither super and arguments get binded in AF.\n   */\n  exec(args = []) {\n    if (!Array.isArray(args)) throw Error('Command exec args must be in an array')\n    if (args.length) return this.fn(args)\n    return this.fn()\n  }\n}\n\nmodule.exports = Command\n","/**\n * @class Single File Class\n * Simulate file properties\n */\nclass File {\n  constructor({ name = '', type = 'file', content = ''} = {}) {\n    this.uid = this.genUid()\n    this.name = name\n    this.type = type\n    this.content = content\n    this.user = 'root'\n    this.group = 'root'\n\n    if (this.type === 'file') {\n      this.permission = 'rwxr--r--'\n    } else {\n      this.permission = 'drwxr-xr-x'\n    }\n\n  }\n\n  genUid() {\n    function s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n      s4() + '-' + s4() + s4() + s4();\n  }\n}\n\nmodule.exports = File\n","const DEFAULT_FS = require('../configs/default-filesystem')\nconst File = require('./File')\n\n/**\n * @class Virtual Filesystem\n * Represented as an object of nodes\n */\nclass Filesystem {\n  constructor(fs = DEFAULT_FS, shell = {}) {\n    this.shell = shell\n    if (typeof fs !== 'object' || Array.isArray(fs)) throw new Error('Virtual Filesystem provided not valid, initialization failed.')\n\n    // Not By Reference.\n    // HACK: Object assign refuse to work as intended.\n    fs = JSON.parse(JSON.stringify(fs))\n    this.FileSystem = this.initFs(fs)\n\n    // CWD for commands usage\n    this.cwd = ['/']\n  }\n\n  /**\n   * Init & Pass Control to recurrsive function\n   * @return new Filesystem as nodes of multiple @class File\n   */\n  initFs(fs) {\n    this.buildVirtualFs(fs)\n    return fs\n  }\n\n  /**\n   * Traverse all node and build a virtual representation of a filesystem\n   * Each node is a File instance.\n   * @param Mocked Filesystem as Object\n   *\n   */\n  buildVirtualFs(obj) {\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n          obj[key] = new File({ name: key, content: obj[key], type: 'dir' })\n          this.buildVirtualFs(obj[key].content)\n        } else {\n          obj[key] = new File({ name: key, content: obj[key] })\n        }\n      }\n    }\n  }\n\n  /**\n   * Get a stringed path and return as array\n   * throw error if path format is invalid\n   * Relative Path gets converted using Current Working Directory\n   * @param path {String}\n   * @return Array\n   */\n  pathStringToArray(path = '') {\n    if (!path.length) throw new Error('Path cannot be empty')\n\n    // Check for invalid path, eg. two+ // in a row\n    if (path.match(/\\/{2,}/g)) throw new Error(`-invalid path: ${path}`)\n\n    // Format and Composer array\n    let pathArray = path.split('/')\n    if (pathArray[0] === '') pathArray[0] = '/'\n    if (pathArray[0] === '.') pathArray.shift()\n    if(pathArray[pathArray.length - 1] === '') pathArray.pop()\n\n    // handle relative path with current working directory\n    if (pathArray[0] !== '/') {\n      pathArray = this.cwd.concat(pathArray)\n    }\n    return pathArray\n  }\n\n  /**\n   * Path from array to String\n   * For presentational purpose.\n   * TODO\n   * @param path [Array]\n   * @return {String}\n   */\n  pathArrayToString(path = []) {\n    if (!Array.isArray(path)) throw new Error('-fatal filesystem: path must be an array')\n    if (!path.length) throw new Error('-invalid filesystem: path not provided')\n    let output = path.join('/')\n    // remove / multiple occurrence\n    return output.replace(/\\/{2,}/g, '/')\n  }\n\n  /**\n   * Luke.. fileWalker\n   * Accepts only Absolute Path, you must convert paths before calling using pathStringToArray\n   * @param cb executed on each file found\n   * @param fs [Shell Virtual Filesystem]\n   */\n  fileWalker(path = ['/'], fs = this.FileSystem){\n    if (!Array.isArray(path)) throw new Error('Path must be an array of nodes, use Filesystem.pathStringToArray({string})')\n\n    // avoid modifying external path reference\n    path = path.slice(0)\n\n    // TODO:\n    //  Choose:\n    //    - Go full pure\n    //    - Work on the reference of the actual node\n    // fs = Object.assign(fs, {})\n\n    // Exit Condition\n    if (!path.length) return fs\n\n    // Get current node\n    let node = path.shift()\n\n    // Go deeper if it's not the root dir\n    if (node !== '/') {\n      // check if node exist\n      if (fs[node]) {\n\n        fs = fs[node].type === 'dir' ? fs[node].content : fs[node]\n      } else {\n        throw new Error('File doesn\\'t exist')\n      }\n    }\n    return this.fileWalker(path, fs)\n  }\n\n  /**\n   * traverseFiles\n   * accessing all file at least once\n   * calling provided callback on each\n   * @param cb executed on each file found\n   * @param fs [Shell Virtual Filesystem]\n   */\n  traverseFiles(cb = ()=>{}, fs = this.FileSystem){\n    const self = this.traverseFiles\n    for (let node in fs) {\n      if (fs.hasOwnProperty(node)) {\n        if (fs[node].type === 'dir') this.traverseFiles(cb, fs[node].content)\n        else cb(fs[node])\n      }\n    }\n  }\n\n  /**\n   * traverseDirs\n   * accessing all directory at least once\n   * calling provided callback on each\n   * @param cb executed on each file found\n   * @param fs [Shell Virtual Filesystem]\n   */\n  traverseDirs(cb = ()=>{}, fs = this.FileSystem){\n    for (let node in fs) {\n      if (fs.hasOwnProperty(node)) {\n        if (fs[node].type === 'dir') {\n          cb(fs[node])\n          this.traverseDirs(cb, fs[node].content)\n        }\n      }\n    }\n  }\n\n  /**\n   * Get Directory Node\n   * Passed as Reference or Instance,\n   * depend by a line in @method fileWalker, see comment there.\n   * @return Directory Node Object\n   */\n  getNode(path = '', fileType) {\n    if (typeof path !== 'string') throw new Error('Invalid input.')\n    let pathArray, node\n    try {\n      pathArray = this.pathStringToArray(path)\n      node = this.fileWalker(pathArray)\n    } catch (e) {\n      throw e\n    }\n    if (fileType === 'dir' && node.type === 'file') {\n      throw new Error('Its a file not a directory')\n    }\n    if (fileType === 'file' && node.type === 'dir') {\n      throw new Error('Its a directory not a file')\n    }\n    if (!node || node.content) {\n      throw new Error('Invalid Path, doent exist')\n    }\n    return { path, pathArray , node }\n  }\n\n  /**\n   * Change Current Working Directory Gracefully\n   * @return Message String.\n   */\n  changeDir(path = '') {\n    let result\n    try {\n      result = this.getNode(path, 'dir')\n    } catch (err) {\n      throw err\n    }\n    this.cwd = result.pathArray\n    return `changed directory.`\n  }\n\n  /**\n   * List Current Working Directory Files\n   * @return {}\n   */\n  listDir(path = '') {\n    let result\n    try {\n      result = this.getNode(path, 'dir')\n    } catch (err) {\n      throw err\n    }\n    return result.node\n  }\n\n  getCurrentDirectory() {\n    let cwdAsString\n    try {\n      cwdAsString = this.pathArrayToString(this.cwd)\n    } catch (e) {\n      return '-invalid filesystem: An error occured while parsing current working directory to string.'\n    }\n    return cwdAsString\n  }\n\n}\n\nmodule.exports = Filesystem\n","const Command = require('./Command')\n\n/**\n *\n * Interpreter\n * Is the parent Class of the Main Shell Class\n * - This class is the one that parse and run exec of command\n * - Parsing of builtin command on runtime happen here\n * - Will parse custom user Command too\n *\n */\nclass Interpreter {\n\n  /**\n   * Parse Command\n   * @return Array of args as in C\n   */\n  parse(cmd) {\n    if (typeof cmd !== 'string') throw new Error('Command must be a string')\n    if (!cmd.length) throw new Error('Command is empty')\n    return cmd.split(' ')\n  }\n\n  /**\n   * Format Output\n   * return error if function is returned\n   * convert everything else to json.\n   * @return JSON parsed\n   */\n  format(output) {\n    if (typeof output === 'function') {\n      return '-invalid command: Command returned invalid data type.'\n    }\n    if (output === undefined || typeof output === 'undefined') {\n      return '-invalid command: Command returned no data.'\n    }\n    return output\n    // try {\n    //   return JSON.stringify(output)\n    // } catch (e) {\n    //   return '-invalid command: Command returned invalid data type: ' + e.message\n    // }\n  }\n\n  /**\n   * Exec Command\n   * @return JSON String with output\n   */\n  exec(cmd) {\n\n    //  Parse Command String: [0] = command name, [1+] = arguments\n    let parsed\n    try {\n      parsed = this.parse(cmd)\n    } catch (e) {\n      return '-fatal command: ' + e.message || 'Some Error Occured'\n    }\n\n    //  X-check if command exist\n    const command = this.ShellCommands[parsed[0]]\n    if (!command) {\n      return `-error shell: Command ${parsed[0]} doesn't exist.\\n`\n    }\n\n    //  get arguments array and execute command return error if throw\n    const args = parsed.filter((e, i) => i > 0)\n    let output\n    try {\n      output = command.exec(args)\n    } catch (e) {\n      return '-fatal command: ' + e.message\n    }\n\n    //  Format data and Return\n    return this.format(output)\n  }\n\n  /*\n   * Generate Builtin Command List\n   */\n  registerCommands(ShellReference, customCommands = undefined) {\n    let Blueprints = require('../configs/builtin-commands')\n    /**\n     * If custom commands are passed check for valid type\n     * If good to go generate those commands\n     */\n    if (customCommands) {\n      if (typeof customCommands === 'object' && !Array.isArray(customCommands)) {\n        Blueprints = customCommands\n      } else {\n        throw new Error('Custom command provided are not in a valid format.')\n      }\n    }\n\n    const ShellCommands = {}\n    Object.keys(Blueprints).map((key) => {\n      const cmd = Blueprints[key]\n      if (typeof cmd.name === 'string' && typeof cmd.fn === 'function') {\n        cmd.shell = ShellReference\n        ShellCommands[key] = new Command(cmd)\n      }\n    })\n    return ShellCommands\n  }\n}\n\nmodule.exports = Interpreter\n","const Interpreter = require('./Interpreter')\nconst Filesystem = require('./Filesystem')\n\n/**\n * Shell Class inherits from Interpreter\n *\n */\nclass Shell extends Interpreter{\n  constructor({ filesystem = undefined, commands = undefined, user = 'root', hostname = 'my.host.me' } = {}) {\n    super()\n\n    /**\n     * Create the virtual filesystem\n     * @return reference to instance of @class Filesystem\n     */\n    this.fs = new Filesystem(filesystem, this)\n    this.user = user\n    this.hostname = hostname\n\n    // Init builtin commands, @method in parent\n    // pass shell reference\n    this.ShellCommands = this.registerCommands(this)\n    this.ShellCommands = {\n      ...this.ShellCommands,\n      ...this.registerCommands(this, commands),\n    }\n  }\n\n  /**\n   * Pass control to Interpreter\n   * @return output as [String]\n   */\n  run(cmd) {\n    return this.exec(cmd)\n  }\n}\n\nObject.defineProperty(Shell.prototype, 'fs', { writable: true, enumerable: false })\nObject.defineProperty(Shell.prototype, 'ShellCommands', { writable: true, enumerable: false })\n\nmodule.exports = Shell\n","var Shell = require('./Shell')\n\n/**\n * Terminal\n * Wrapper on the Shell class\n * This will only handle the UI of the terminal.\n * You can use it or use directly the browser-shell.js\n * and create your custom UI calling and displaying the Shell.run() commands\n */\nclass Terminal extends Shell{\n  constructor(selector = undefined, options = {}) {\n\n    super(options) // must pass option here\n\n    this.hostname = options.hostname || 'host'\n\n    if (!selector) throw new Error('No wrapper element selector provided')\n    try {\n      this.container = document.querySelector(selector)\n      if (!this.container) throw new Error('new Terminal(): DOM element not found')\n    } catch (e) {\n      throw new Error('new Terminal(): Not valid DOM selector.')\n    }\n\n    return this.init()\n  }\n\n  init() {\n    this.generateRow()\n    this.container.addEventListener('click', (e) => {\n      e.stopPropagation()\n      let input = this.container.querySelector('.current .terminal-input')\n      if (input) input.focus()\n    })\n  }\n\n  generateRow() {\n    var that = this\n\n    // Remove previous current active row\n    let current = document.querySelector('.current.terminal-row')\n    if (current) {\n      current.classList.remove('current')\n    }\n\n    let prevInput = document.querySelector('.terminal-input')\n    if (prevInput) {\n      prevInput.removeEventListener('keyup', this.submitHandler)\n    }\n\n    const div = document.createElement('div')\n    div.classList.add('current', 'terminal-row')\n    div.innerHTML = ''\n    div.innerHTML += `<span class=\"terminal-info\">guest@${this.hostname} - ${this.fs.getCurrentDirectory()} ➜ </span>`\n    div.innerHTML += `<input type=\"text\" class=\"terminal-input\" size=\"2\" style=\"cursor:none;\">`\n\n    // add new row and focus it\n    this.container.appendChild(div)\n    let input = this.container.querySelector('.current .terminal-input')\n    input.addEventListener('keyup', e => this.submitHandler(e))\n    input.focus()\n\n    return input\n  }\n\n  generateOutput(out = '') {\n    const pre = document.createElement('pre')\n    pre.innerHTML = out\n    this.container.appendChild(pre)\n    return this.generateRow()\n  }\n\n  submitHandler(e) {\n    e.stopPropagation()\n    // RUN when ENTER is pressed\n    if (event.which == 13 || event.keyCode == 13) {\n      e.preventDefault()\n      const command = e.target.value.trim()\n      // EXEC\n      const output = this.run(command)\n      return this.generateOutput(output)\n    }\n  }\n}\n\nmodule.exports = Terminal\n","module.exports = {\n\n  /**\n   * Help\n   * @return List of commands\n   */\n  help: {\n    name: 'help',\n    type: 'builtin',\n    fn: function() {\n      return `Commands avaible: ${Object.keys(this.shell.ShellCommands).join(', ')}`\n    }\n  },\n\n  whoami: {\n    name: 'whoami',\n    type: 'builtin',\n    fn: function() {\n      return this.shell.user\n    },\n  },\n\n  /**\n   * Return passed arguments, for testing purposes\n   */\n  arguments: {\n    name: 'arguments',\n    type: 'builtin',\n    fn: args => args\n  },\n\n  /**\n   * Change Directory\n   * @return Success/Fail Message String\n   */\n  cd: {\n    name: 'cd',\n    type: 'builtin',\n    fn: function(path) {\n      if (!path) throw new Error('-invalid No path provided.')\n      path = path.join()\n      try{\n        return this.shell.fs.changeDir(path)\n      } catch(e) {\n        throw e\n      }\n    }\n  },\n\n  /**\n   * ls Command\n   * List directory files\n   * @param array of args\n   * @return formatted String\n   */\n  ls: {\n    name: 'ls',\n    type: 'builtin',\n    fn: function(path = ['./'] ) {\n      path = path.join()\n      let list, responseString = ''\n      try{\n        list = this.shell.fs.listDir(path)\n      } catch(e) {\n        throw e\n      }\n      for (let file in list) {\n        if (list.hasOwnProperty(file)) {\n          responseString += `${list[file].permission}\\t${list[file].user} ${list[file].group}\\t${list[file].name}\\n`\n        }\n      }\n      return responseString\n    }\n  },\n\n  /**\n   * CAT Command\n   * Read File\n   * @return formatted String\n   */\n  ls: {\n    name: 'ls',\n    type: 'builtin',\n    fn: function(path = ['./']) {\n      path = path.join()\n      let list, responseString = ''\n      try{\n        list = this.shell.fs.listDir(path)\n      } catch(e) {\n        throw e\n      }\n      for (let file in list) {\n        if (list.hasOwnProperty(file)) {\n          responseString += `${list[file].permission}\\t${list[file].user} ${list[file].group}\\t${list[file].name}\\n`\n        }\n      }\n      return responseString\n    }\n  },\n\n}\n","module.exports = {\n\n  'file.h': '#include <nope.h>',\n\n  etc: {\n    apache2: {\n      'apache2.conf': 'Not What you were looking for :)',\n    },\n  },\n\n  home: {\n    guest: {\n      docs: {\n        'mydoc.md': 'TestFile',\n        'mydoc2.md': 'TestFile2',\n        'mydoc3.md': 'TestFile3',\n      },\n    },\n  },\n\n  root:{\n    '.zshrc': 'not even close :)',\n    '.oh-my-zsh': {\n      themes: {},\n    },\n  },\n}\n"]}